name: Build Linux Releases

on: [push, pull_request]

jobs:
  build_debian_derivatives:
    strategy:
      fail-fast: false
      matrix:
        environment: [
            "ubuntu:22.10",
            "ubuntu:22.04",
            "ubuntu:20.04",
            "ubuntu:18.04",
            "ubuntu:16.04",
            "ubuntu:14.04",
            "debian:11",
            "debian:10",
            "debian:9"
        ]
        # perform gcc builds for all environments
        cc: [ "gcc" ]
        libcurl_package: [ "libcurl4-openssl-dev" ]

    name: build on ${{ matrix.environment }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: install dependencies from package management
        env:
          CC: ${{ matrix.cc }}
          DEBIAN_FRONTEND: noninteractive
          LIBCURL_PACKAGE: ${{ matrix.libcurl_package }}
        run: |
          export DEBIAN_FRONTEND=noninteractive

          apt-get update && apt-get dist-upgrade -y
          apt-get install -y build-essential      \
                                  chrpath              \
                                  cmake                \
                                  pkg-config           \
                                  gengetopt            \
                                  help2man             \
                                  libedit-dev          \
                                  libcurl4-openssl-dev \
                                  liblzma-dev          \
                                  libssl-dev           \
                                  libseccomp-dev       \
                                  libusb-1.0.0-dev     \
                                  dh-exec              \
                                  git-buildpackage     \
                                  curl                 \
                                  libpcsclite-dev      \
                                  file                 \
                                  curl                 \
                                  jq

      - name: clone the Yubico/yubihsm-shell repository
        uses: actions/checkout@v2
        with:
          path: yubihsm-shell

      - name: apply environment specific changes to CMakeLists.txt
        working-directory: yubihsm-shell
        if: ${{ matrix.environment == 'ubuntu:14.04' }}
        run: |
          # ubuntu 14.04 comes with cmake version 2.8, but the project requires 3.1
          # we downgrade that requirement for the ubuntu 14.04 build
          sed -i 's/cmake_minimum_required (VERSION 3.1)/cmake_minimum_required (VERSION 2.8)/' CMakeLists.txt
          # we also remove the following policies which are not supported in the older cmake version
          sed -i 's/cmake_policy(SET CMP0025 NEW)/#cmake_policy(SET CMP0025 NEW)/' CMakeLists.txt
          sed -i 's/cmake_policy(SET CMP0042 NEW)/#cmake_policy(SET CMP0042 NEW)/' CMakeLists.txt
          sed -i 's/cmake_policy(SET CMP0054 NEW)/#cmake_policy(SET CMP0054 NEW)/' CMakeLists.txt
          # append the following flags: -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration
          sed -i 's/-Wall -Wextra -Werror/-Wall -Wextra -Werror -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration/' cmake/SecurityFlags.cmake

      - name: extract platform name
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
        run: |
          PLATFORM=$(echo -n "$DOCKER_IMAGE" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*//g')
          PLATFORM=$(echo -n "$PLATFORM" | sed -e 's/[ \t.\/\\"<>|*?]/-/g' -e 's/--*//g')
          echo "PLATFORM_NAME=$PLATFORM" >> $GITHUB_ENV

      - name: build release
        working-directory: yubihsm-shell
        env:
          PLATFORM: ${{ env.PLATFORM_NAME }}
        run: |
          set -x

          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          ls $GITHUB_WORKSPACE
          sleep 5


          # Create directory containing all output
          OUTPUT=$GITHUB_WORKSPACE/$PLATFORM/yubihsm-shell
          mkdir -p $OUTPUT

          if [ $PLATFORM == "debian9" ] || [ $PLATFORM == "debian10" ] || [ $PLATFORM == "debian11" ] || [ $PLATFORM == "ubuntu1804" ]; then
            dpkg-buildpackage -b --no-sign
          else
            dpkg-buildpackage
          fi
          cp ../*.deb $OUTPUT/

          LICENSE_DIR="$OUTPUT/share/yubihsm-shell"
          mkdir -p $LICENSE_DIR
          ls $GITHUB_WORKSPACE/yubihsm-shell/resources/release/linux
          cp -r $GITHUB_WORKSPACE/yubihsm-shell/resources/release/linux/licenses $LICENSE_DIR/
          for lf in $LICENSE_DIR/licenses/*; do
            chmod 644 $lf
          done

          cd $OUTPUT
          rm -f yubihsm-shell-$PLATFORM-amd64.tar.gz
          tar -C .. -zcvf ../yubihsm-shell-$PLATFORM-amd64.tar.gz yubihsm-shell
          rm -f *.deb
          rm -rf licenses
          rm -rf ../yubihsm-shell

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "yubihsm-shell-${{ env.PLATFORM_NAME }}-amd64"
          path: ${{ env.PLATFORM_NAME }}

  build_centos_fedora:
    strategy:
      fail-fast: false
      matrix:
        environment: [
            "fedora:36",
            "fedora:37",
            "centos:7"
        ]

    name: build on ${{ matrix.environment }} with ${{ matrix.cc }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: clone the Yubico/yubihsm-shell repository
        uses: actions/checkout@v2
        with:
          path: yubihsm-shell

      - name: apply environment specific changes to CMakeLists.txt
        working-directory: yubihsm-shell
        if: ${{ matrix.environment == 'centos:7' }}
        run: |
          # centos 7 comes with cmake version 2.8, but the project requires 3.1
          # we downgrade that requirement for the centos 7 build
          sed -i 's/cmake_minimum_required (VERSION 3.1)/cmake_minimum_required (VERSION 2.8)/' CMakeLists.txt
          # we also remove the following policies which are not supported in the older cmake version
          sed -i 's/cmake_policy(SET CMP0025 NEW)/#cmake_policy(SET CMP0025 NEW)/' CMakeLists.txt
          sed -i 's/cmake_policy(SET CMP0042 NEW)/#cmake_policy(SET CMP0042 NEW)/' CMakeLists.txt
          sed -i 's/cmake_policy(SET CMP0054 NEW)/#cmake_policy(SET CMP0054 NEW)/' CMakeLists.txt
          # append the following flags: -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration
          sed -i 's/-Wall -Wextra -Werror/-Wall -Wextra -Werror -Wno-missing-braces -Wno-missing-field-initializers/' cmake/SecurityFlags.cmake

      - name: extract platform name
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
        run: |
          PLATFORM=$(echo -n "$DOCKER_IMAGE" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*//g')
          PLATFORM=$(echo -n "$PLATFORM" | sed -e 's/[ \t.\/\\"<>|*?]/-/g' -e 's/--*//g')
          echo "PLATFORM_NAME=$PLATFORM" >> $GITHUB_ENV

      - name: install dependencies
        env:
          PLATFORM: ${{ env.PLATFORM_NAME }}
        run: |
          cd resources/release/linux
          ./install_redhat_dependencies.sh $PLATFORM

      - name: build release
        working-directory: yubihsm-shell
        env:
          PLATFORM: ${{ env.PLATFORM_NAME }}
        run: |
          #cd resources/release/linux
          #./build-rpm-in-githunactions.sh $PLATFORM

          export INPUT=$GITHUB_WORKSPACE/yubihsm-shell
          export OUTPUT=$GITHUB_WORKSPACE/$PLATFORM/yubihsm-shell
          rm -rf $OUTPUT
          mkdir -p $OUTPUT

          # These 2 lines can be replaced by the command "rpmdev-setuptree", but this command seems to add macros that force check paths that do not exist
          mkdir -p $GITHUB_WORKSPACE/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          echo '%_topdir %(echo $HOME)/rpmbuild' > $GITHUB_WORKSPACE/.rpmmacros

          RPM_DIR=$GITHUB_WORKSPACE/rpmbuild

          cp resources/release/linux/yubihsm-shell.spec $RPM_DIR/SPECS/

          QA_SKIP_BUILD_ROOT=1 QA_RPATHS=$(( 0x0001|0x0010 )) rpmbuild -bb $RPM_DIR/SPECS/yubihsm-shell-in-githubactions.spec
          cp /github/home/rpmbuild/RPMS/x86_64/*.rpm $OUTPUT

          LICENSE_DIR="$OUTPUT/share/yubihsm-shell"
          mkdir -p $LICENSE_DIR
          cp -r $INPUT/yubihsm-shell/resources/release/linux/licenses $LICENSE_DIR/
          for lf in $LICENSE_DIR/licenses/*; do
           chmod 644 $lf
          done

          cd $OUTPUT
          rm -f "yubihsm-shell-$PLATFORM-amd64.tar.gz"
          tar -C ".." -zcvf "../yubihsm-shell-$PLATFORM-amd64.tar.gz" "yubihsm-shell"
          rm -f *.rpm
          rm -rf licenses
          rm -rf ../yubihsm-shell

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "yubihsm-shell-${{ env.PLATFORM_NAME }}-amd64"
          path: ${{ env.PLATFORM_NAME }}
