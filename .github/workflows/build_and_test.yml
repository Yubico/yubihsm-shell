name: Build and Test

on: [push, pull_request]

jobs:
  build_debian_derivatives:
    strategy:
      fail-fast: false
      matrix:
        environment: [
          "ubuntu:21.10",
          "ubuntu:21.04",
          "ubuntu:20.04",
          "ubuntu:18.04",
          "ubuntu:16.04",
          "ubuntu:14.04",
          "debian:11",
          "debian:10",
          "debian:9"
        ]
        # perform gcc builds for all environments
        cc: [ "gcc" ]
        # debian 9 has a different version of openssl in libcurl4-openssl-dev
        # as such, for that environment in particular we install libcurl4-nss-dev
        # for all other environments we use the standard libcurl4-openssl-dev
        libcurl_package: [ "libcurl4-openssl-dev" ]
        exclude:
          - environment: "debian:9"
            cc: "gcc"
            libcurl_package: "libcurl4-openssl-dev"
        include:
          - environment: "debian:9"
            cc: "gcc"
            libcurl_package: "libcurl4-nss-dev"
    name: build on ${{ matrix.environment }} with ${{ matrix.cc }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: install dependencies from package management
        env:
          CC: ${{ matrix.cc }}
          DEBIAN_FRONTEND: noninteractive
          LIBCURL_PACKAGE: ${{ matrix.libcurl_package }}
        run: |
          apt update
          apt install -q -y build-essential cmake pkg-config gengetopt help2man $LIBCURL_PACKAGE libedit-dev libpcsclite-dev libusb-1.0-0-dev libssl-dev file curl jq
          if [ "$CC" = "clang" ]; then
            apt install -q -y clang llvm lld
          fi

      - name: clone the Yubico/yubihsm-shell repository
        uses: actions/checkout@v2
        with:
          path: yubihsm-shell

      - name: apply environment specific changes to CMakeLists.txt
        working-directory: yubihsm-shell
        env:
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          if [ $BUILD_ENVIRONMENT = "ubuntu:14.04" ]; then
            # append the following flags: -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration
            sed -i 's/-Wall -Wextra -Werror/-Wall -Wextra -Werror -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration/' cmake/SecurityFlags.cmake
            cat cmake/SecurityFlags.cmake
          fi

      - name: do build
        working-directory: yubihsm-shell
        env:
          CC: ${{ matrix.cc }}
          VERBOSE: 1
        run: |
          mkdir build
          cd build
          if [ "$CC" = "gcc" ]; then
            cmake -DCMAKE_BUILD_TYPE=Release ..
          else
            cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_AR=/usr/bin/llvm-ar \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib \
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
              ..
          fi
          cmake --build .

      - name: do static build
        working-directory: yubihsm-shell
        env:
          CC: ${{ matrix.cc }}
          VERBOSE: 1
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          mkdir build-static
          cd build-static
          if [ "$CC" = "gcc" ]; then
            # lto breaks static builds on debian:9 so we disable it
            if [ $BUILD_ENVIRONMENT = "debian:9" ]; then
              cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release -DDISABLE_LTO=ON ..
            else
              cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release ..
            fi
          else
            cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_AR=/usr/bin/llvm-ar \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib \
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
              ..
          fi
          cmake --build .

      - name: check binaries for hardening
        working-directory: yubihsm-shell
        run: |
          curl -o checksec.sh-2.5.0.tar.gz -L https://github.com/slimm609/checksec.sh/archive/refs/tags/2.5.0.tar.gz
          tar xfz checksec.sh-2.5.0.tar.gz
          cs() {
            checksec.sh-2.5.0/checksec --file=build/src/yubihsm-shell --format=json | jq -r ".[] | .$1"
          }
          if [ "`cs relro`" != "full" ]; then echo "relro is `cs relro`"; exit 1; fi
          if [ "`cs canary`" != "yes" ]; then echo "canary is `cs canary`"; exit 1; fi
          if [ "`cs nx`" != "yes" ]; then echo "nx is `cs nx`"; exit 1; fi
          if [ "`cs pie`" != "yes" ]; then echo "pie is `cs pie`"; exit 1; fi
          if [ "`cs fortify_source`" != "yes" ]; then echo "fortify_source is `cs fortify_source`"; exit 1; fi

      - name: prepare name for upload-artifact action
        if: ${{ matrix.environment == 'ubuntu:21.10' && matrix.cc == 'gcc' }}
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
          CC: ${{ matrix.cc }}
        run: |
          ESCAPED_IMAGE=$(echo -n "$DOCKER_IMAGE" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
          echo "ARTIFACT_NAME=yubihsm-shell_${ESCAPED_IMAGE}_${CC}" >> $GITHUB_ENV

      - name: upload artifacts for the test job
        if: ${{ matrix.environment == 'ubuntu:21.10' && matrix.cc == 'gcc' }}
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: yubihsm-shell

#  test:
#    name: run unit tests
#    runs-on: ubuntu-latest
#    container: ubuntu:21.10
#    needs: build_debian_derivatives
#
#    steps:
#
#      - name: install dependencies from package management
#        env:
#          DEBIAN_FRONTEND: noninteractive
#        run: |
#          apt update
#          apt install -q -y build-essential python3 python3-pip python3-setuptools curl
#
#      - name: download artifacts from the build job
#        uses: actions/download-artifact@v2
#        with:
#          name: yubihsm-shell_ubuntu-21.10_gcc
#          path: yubihsm-shell
#
#      - name: prepare ghostunnel
#        env:
#          TLSPWD: ${{ secrets.TLSKEY }}
#        run: |
#          curl -o ghostunnel -L https://github.com/ghostunnel/ghostunnel/releases/download/v1.6.0/ghostunnel-v1.6.0-linux-amd64
#          chmod + ghostunnel
#          openssl aes-256-cbc \
#            -k "$TLSPWD" \
#            -md sha256 \
#            -in yubihsm-shell/.ci/client-combined.pem.enc \
#            -out yubihsm-shell/.ci/client-combined.pem \
#            -d
#          ghostunnel client \
#            --listen localhost:12345 \
#            --target hsm-connector01.sthlm.in.yubico.org:8443 \
#            --keystore yubihsm-shell/.ci/client-combined.pem \
#            --cacert yubihsm-shell/.ci/server-crt.pem \
#            2>/dev/null &
#          sleep 3
#          DEFAULT_CONNECTOR_URL=$(curl -s http://localhost:12345/dispatcher/request)
#          test -n "$DEFAULT_CONNECTOR_URL" || (echo "Unable to obtain a connector URL, aborting"; exit 1)
#          echo "DEFAULT_CONNECTOR_URL=$DEFAULT_CONNECTOR_URL" >> $GITHUB_ENV
#
#      - name: reset the hsm
#        working-directory: yubihsm-shell/build/src
#        run: |
#          yubihsm-shell --connector "$DEFAULT_CONNECTOR_URL" -p password -a reset
#          sleep 3
#
#      - name: clone the YubicoLabs/pkcs11test repository
#        uses: actions/checkout@v2
#        with:
#          repository: YubicoLabs/pkcs11test
#          path: pkcs11test
#
#      - name: build the pkcs11test binary
#        working-directory: pkcs11test
#        run: |
#          make
#          echo "PKCS11TEST_PATH=`pwd`/pkcs11test" >> $GITHUB_ENV
#
#      - name: run tests with ctest
#        working-directory: yubihsm-shell/build
#        run: ctest --output-on-failure
#
#      - name: run yubihsm-shell tests
#        working-directory: yubihsm-shell/resources/tests/bash
#        run: cmdline_test.sh $GITHUB_WORKSPACE/yubihsm-shell/build/src/yubihsm-shell $DEFAULT_CONNECTOR_URL
#
#      - name: clone the YubicoLabs/python-pkcs11tester repository
#        uses: actions/checkout@v2
#        with:
#          repository: YubicoLabs/python-pkcs11tester
#          path: python-pkcs11tester
#
#      - name: run python-pkcs11tester
#        env:
#          YUBIHSM_PKCS11_MODULE: yubihsm-shell/build/pkcs11/yubihsm_pkcs11.so
#        run: |
#          echo "connector=$DEFAULT_CONNECTOR_URL" > yubihsm_pkcs11.conf
#          python3 -m pip install 'pykcs11' 'cryptography>=1.4.0'
#          python3 setup.py test
