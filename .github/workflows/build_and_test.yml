name: Build and Test

on: [push, pull_request]

jobs:
  build_debian_derivatives:
    strategy:
      fail-fast: false
      matrix:
        environment: [
          "ubuntu:21.10",
          "ubuntu:21.04",
          "ubuntu:20.04",
          "ubuntu:18.04",
          "ubuntu:16.04",
          "ubuntu:14.04",
          "debian:11",
          "debian:10",
          "debian:9"
        ]
        # perform gcc builds for all environments
        cc: [ "gcc" ]
        libcurl_package: [ "libcurl4-openssl-dev" ]
        include:
          # debian 9 has a different version of openssl in libcurl4-openssl-dev
          # as such, for that environment in particular we install libcurl4-nss-dev
          # for all other environments we use the standard libcurl4-openssl-dev
          - environment: "debian:9"
            cc: "gcc"
            libcurl_package: "libcurl4-nss-dev"
          # we do not perform clang builds for all environments, only some newer ones
          - environment: "ubuntu:21.10"
            libcurl_package: "libcurl4-openssl-dev"
            cc: "clang"
          - environment: "ubuntu:21.04"
            libcurl_package: "libcurl4-openssl-dev"
            cc: "clang"
          - environment: "debian:11"
            libcurl_package: "libcurl4-openssl-dev"
            cc: "clang"
        exclude:
          - environment: "debian:9"
            cc: "gcc"
            libcurl_package: "libcurl4-openssl-dev"
    name: build on ${{ matrix.environment }} with ${{ matrix.cc }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: install dependencies from package management
        env:
          CC: ${{ matrix.cc }}
          DEBIAN_FRONTEND: noninteractive
          LIBCURL_PACKAGE: ${{ matrix.libcurl_package }}
        run: |
          apt update
          apt install -q -y build-essential cmake pkg-config gengetopt help2man $LIBCURL_PACKAGE libedit-dev libpcsclite-dev libusb-1.0-0-dev libssl-dev file curl jq
          if [ "$CC" = "clang" ]; then
            apt install -q -y clang llvm lld
          fi

      - name: clone the Yubico/yubihsm-shell repository
        uses: actions/checkout@v2
        with:
          path: yubihsm-shell

      - name: apply environment specific changes to CMakeLists.txt
        working-directory: yubihsm-shell
        env:
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          if [ $BUILD_ENVIRONMENT = "ubuntu:14.04" ]; then
            # append the following flags: -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration
            sed -i 's/-Wall -Wextra -Werror/-Wall -Wextra -Werror -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration/' cmake/SecurityFlags.cmake
            cat cmake/SecurityFlags.cmake
          fi

      - name: do build
        working-directory: yubihsm-shell
        env:
          CC: ${{ matrix.cc }}
          VERBOSE: 1
        run: |
          mkdir build
          cd build
          if [ "$CC" = "gcc" ]; then
            cmake -DRELEASE_BUILD=1 -DWITHOUT_YKYH=1 ..
          else
            cmake -DRELEASE_BUILD=1 -DWITHOUT_YKYH=1 \
              -DCMAKE_AR=/usr/bin/llvm-ar \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib \
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
              ..
          fi
          cmake --build .

      - name: do static build
        working-directory: yubihsm-shell
        env:
          CC: ${{ matrix.cc }}
          VERBOSE: 1
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          mkdir build-static
          cd build-static
          if [ "$CC" = "gcc" ]; then
            # lto breaks static builds on debian:9 so we disable it
            if [ $BUILD_ENVIRONMENT = "debian:9" ]; then
              cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release -DDISABLE_LTO=ON ..
            else
              cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release ..
            fi
          else
            cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_AR=/usr/bin/llvm-ar \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib \
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
              ..
          fi
          cmake --build .

      - name: check binaries for hardening
        working-directory: yubihsm-shell
        run: |
          curl -o checksec.sh-2.5.0.tar.gz -L https://github.com/slimm609/checksec.sh/archive/refs/tags/2.5.0.tar.gz
          tar xfz checksec.sh-2.5.0.tar.gz
          cs() {
            checksec.sh-2.5.0/checksec --file=build/src/yubihsm-shell --format=json | jq -r ".[] | .$1"
          }
          if [ "`cs relro`" != "full" ]; then echo "relro is `cs relro`"; exit 1; fi
          if [ "`cs canary`" != "yes" ]; then echo "canary is `cs canary`"; exit 1; fi
          if [ "`cs nx`" != "yes" ]; then echo "nx is `cs nx`"; exit 1; fi
          if [ "`cs pie`" != "yes" ]; then echo "pie is `cs pie`"; exit 1; fi
          if [ "`cs fortify_source`" != "yes" ]; then echo "fortify_source is `cs fortify_source`"; exit 1; fi

      - name: prepare name for upload-artifact action
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
          CC: ${{ matrix.cc }}
        run: |
          ESCAPED_IMAGE=$(echo -n "$DOCKER_IMAGE" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
          echo "ARTIFACT_NAME=yubihsm-shell_${ESCAPED_IMAGE}_${CC}" >> $GITHUB_ENV

      - name: create compressed tar file
        if: ${{ (matrix.environment == 'ubuntu:21.10' || matrix.environment == 'debian:11') && matrix.cc == 'gcc' }}
        run: tar cfz yubihsm-shell.tar.gz yubihsm-shell

      - name: upload artifacts for the test job
        if: ${{ (matrix.environment == 'ubuntu:21.10' || matrix.environment == 'debian:11') && matrix.cc == 'gcc' }}
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: yubihsm-shell.tar.gz

  build_centos_fedora:
    strategy:
      matrix:
        environment: [
          "fedora:34",
          "fedora:33",
          "fedora:32",
          "centos:7"
        ]
        cc: [ "gcc" ]
        include:
          # we do not perform clang builds for all environments, only fedora
          - environment: "fedora:34"
            cc: "clang"
          - environment: "fedora:33"
            cc: "clang"
          - environment: "fedora:32"
            cc: "clang"
    name: build on ${{ matrix.environment }} with ${{ matrix.cc }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: install dependencies from package management
        env:
          CC: ${{ matrix.cc }}
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          if [ $BUILD_ENVIRONMENT = "centos:7" ]; then
            # enable the epel repository for centos
            yum install -y epel-release
          fi
          # the name of the libusb package in centos:7 is libusbx-devel
          if [ $BUILD_ENVIRONMENT = "centos:7" ]; then
            LIBUSB_PACKAGE="libusbx-devel"
          else
            LIBUSB_PACKAGE="libusb-devel"
          fi
          yum install -y gcc gcc-c++ cmake gengetopt openssl openssl-devel libedit-devel libcurl-devel $LIBUSB_PACKAGE pcsc-lite-devel help2man chrpath checksec procps-ng jq file which curl
          if [ "$CC" = "clang" ]; then
            yum install -y clang llvm lld
          fi

      - name: clone the Yubico/yubihsm-shell repository
        uses: actions/checkout@v2
        with:
          path: yubihsm-shell

      - name: apply environment specific changes to CMakeLists.txt
        working-directory: yubihsm-shell
        env:
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          if [ $BUILD_ENVIRONMENT = "centos:7" ]; then
            # append the following flags: -Wno-missing-braces -Wno-missing-field-initializers -Wno-implicit-function-declaration
            sed -i 's/-Wall -Wextra -Werror/-Wall -Wextra -Werror -Wno-missing-braces -Wno-missing-field-initializers/' cmake/SecurityFlags.cmake
            cat cmake/SecurityFlags.cmake
          fi

      - name: do build
        working-directory: yubihsm-shell
        env:
          CC: ${{ matrix.cc }}
          VERBOSE: 1
        run: |
          mkdir build
          cd build
          if [ "$CC" = "gcc" ]; then
            cmake -DCMAKE_BUILD_TYPE=Release ..
          else
            cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_AR=/usr/bin/llvm-ar \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib \
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
              ..
          fi
          cmake --build .

      - name: do static build
        working-directory: yubihsm-shell
        env:
          CC: ${{ matrix.cc }}
          VERBOSE: 1
          BUILD_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          mkdir build-static
          cd build-static
          if [ "$CC" = "gcc" ]; then
            # lto breaks static builds on centos 7 so we disable it
            if [ $BUILD_ENVIRONMENT = "centos:7" ]; then
              cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release -DDISABLE_LTO=ON ..
            else
              cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release ..
            fi
          else
            cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_AR=/usr/bin/llvm-ar \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib \
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
              ..
          fi
          cmake --build .

      - name: check binaries for hardening
        working-directory: yubihsm-shell
        run: |
          cs() {
            checksec --file=build/src/yubihsm-shell --format=json | jq -r ".[] | .$1"
          }
          if [ "`cs relro`" != "full" ]; then echo "relro is `cs relro`"; exit 1; fi
          if [ "`cs canary`" != "yes" ]; then echo "canary is `cs canary`"; exit 1; fi
          if [ "`cs nx`" != "yes" ]; then echo "nx is `cs nx`"; exit 1; fi
          if [ "`cs pie`" != "yes" ]; then echo "pie is `cs pie`"; exit 1; fi
          if [ "`cs fortify_source`" != "yes" ]; then echo "fortify_source is `cs fortify_source`"; exit 1; fi

      - name: prepare name for upload-artifact action
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
          CC: ${{ matrix.cc }}
        run: |
          ESCAPED_IMAGE=$(echo -n "$DOCKER_IMAGE" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
          echo "ARTIFACT_NAME=yubihsm-shell_${ESCAPED_IMAGE}_${CC}" >> $GITHUB_ENV

      - name: create compressed tar file
        if: ${{ (matrix.environment == 'fedora:34' || matrix.environment == 'centos:7') && matrix.cc == 'gcc' }}
        run: tar cfz yubihsm-shell.tar.gz yubihsm-shell

      - name: upload artifacts for the test job
        if: ${{ (matrix.environment == 'fedora:34' || matrix.environment == 'centos:7') && matrix.cc == 'gcc' }}
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: yubihsm-shell.tar.gz

  build_macos:
    name: build on macos
    runs-on: macos-latest

    steps:

      - name: install dependencies using brew
        run: brew install cmake gengetopt help2man libedit libusb openssl@1.1 pkg-config swig truncate

      - name: clone the Yubico/yubihsm-shell repository
        uses: actions/checkout@v2
        with:
          path: yubihsm-shell

      - name: do build
        working-directory: yubihsm-shell
        env:
          VERBOSE: 1
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .

      - name: do static build
        working-directory: yubihsm-shell
        env:
          VERBOSE: 1
        run: |
          mkdir build-static
          cd build-static
          cmake -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .

      - name: check binaries for hardening
        working-directory: yubihsm-shell
        run: |
          otool -hv build/src/yubihsm-shell
          # awk only looks at the fourth (last) output line of otool
          # the first line is the path to the file
          # the second line is simply 'Mach header'
          # the thirt line contains the column names
          otool -hv build/src/yubihsm-shell | awk 'NR == 4 {
            split($0, stdin_split, " ");

            flag_pie = 0;
            flag_allow_stack_execution = 0;
            flag_no_heap_execution = 0;

            # first 7 tokens are unrelated to the header flags
            # so we start looking tokens from the 8th position
            for (i = 8; i <= length(stdin_split); i++) {
              flag = stdin_split[i]
              if (flag == "PIE") {
                flag_pie = 1;
              }
              if (flag == "ALLOW_STACK_EXECUTION") {
                flag_allow_stack_execution = 1;
              }
              if (flag == "NO_HEAP_EXECUTION") {
                flag_no_heap_execution = 1;
              }
            }

            fail = 0;
            if (flag_pie == 0) {
              print "BINARY DOES NOT HAVE THE PIE FLAG";
              fail = 1;
            }
            if (flag_allow_stack_execution == 1) {
              print "BINARY ALLOWS EXECUTION FROM THE STACK";
              fail = 1;
            }
            if (flag_no_heap_execution == 0) {
              print "BINARY ALLOWS EXECUTION FROM THE HEAP";
              # currently we do not treat this as an error
            }
            if (fail == 1) {
              exit 1;
            }
          }'
          if [ $? = 1 ]; then
            exit 1
          fi

          check_import() {
            nm -u build/src/yubihsm-shell | grep $1 > /dev/null
            # return code of grep is 0 when it finds something
            if [ $? == 0 ]; then
              echo 1
            else
              echo 0
            fi
          }
          chk_fail=$(check_import '___stack_chk_fail')
          chk_guard=$(check_import '___stack_chk_guard')
          if [ $chk_fail = 0 ] | [ $chk_guard = 0 ]; then
            echo "BINARY DOES NOT HAVE STACK CANARIES"
            exit 1
          fi

  test:
    strategy:
      matrix:
        environment: [
          "ubuntu:21.10",
          "debian:11",
          "fedora:34",
          "centos:7"
        ]
    name: run unit tests
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}
    needs: [build_debian_derivatives, build_centos_fedora]

    steps:

      - name: install dependencies from package management (debian based)
        env:
          DEBIAN_FRONTEND: noninteractive
        if: ${{ matrix.environment == 'ubuntu:21.10' || matrix.environment == 'debian:11' }}
        run: |
          apt update
          apt install -q -y build-essential cmake python3 python3-pip python3-setuptools curl libedit2 libssl1.1 libpcsclite1 libengine-pkcs11-openssl opensc swig

      - name: install dependencies from package management (rpm based)
        if: ${{ matrix.environment == 'fedora:34' || matrix.environment == 'centos:7' }}
        run: |
          if [ $BUILD_ENVIRONMENT = "centos:7" ]; then
            # enable the epel repository for centos
            yum install -y epel-release
          fi
          yum install -y gcc gcc-c++ cmake python3 python3-pip python3-setuptools curl libedit gengetopt openssl libcurl pcsc-lite

      - name: prepare name for download-artifact action
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
          CC: ${{ matrix.cc }}
        run: |
          ESCAPED_IMAGE=$(echo -n "$DOCKER_IMAGE" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
          echo "ARTIFACT_NAME=yubihsm-shell_${ESCAPED_IMAGE}_gcc" >> $GITHUB_ENV

      - name: download artifacts from the build job
        uses: actions/download-artifact@v2
        with:
          name: "${{ env.ARTIFACT_NAME }}"

      - name: decompress yubihsm-shell.tar.gz
        run: tar xfz yubihsm-shell.tar.gz

      - name: prepare ghostunnel
        env:
          TLSPWD: ${{ secrets.TLSKEY }}
          # GODEBUG required for ghostunnel to temporarily enable Common Name matching
          GODEBUG: x509ignoreCN=0
        run: |
          curl -o /tmp/ghostunnel -L https://github.com/ghostunnel/ghostunnel/releases/download/v1.6.0/ghostunnel-v1.6.0-linux-amd64
          chmod +x /tmp/ghostunnel
          openssl aes-256-cbc \
            -k "$TLSPWD" \
            -md sha256 \
            -in yubihsm-shell/.ci/client-combined.pem.enc \
            -out yubihsm-shell/.ci/client-combined.pem \
            -d
          /tmp/ghostunnel client \
            --listen localhost:12345 \
            --target hsm-connector01.sthlm.in.yubico.org:8443 \
            --keystore yubihsm-shell/.ci/client-combined.pem \
            --cacert yubihsm-shell/.ci/server-crt.pem > /dev/null 2>&1 &
          sleep 3
          DEFAULT_CONNECTOR_URL=$(curl -s http://localhost:12345/dispatcher/request)
          test -n "$DEFAULT_CONNECTOR_URL" || (echo "Unable to obtain a connector URL, aborting"; exit 1)
          echo "DEFAULT_CONNECTOR_URL=$DEFAULT_CONNECTOR_URL" >> $GITHUB_ENV

      - name: clone the YubicoLabs/pkcs11test repository
        uses: actions/checkout@v2
        with:
          repository: YubicoLabs/pkcs11test
          path: pkcs11test

      - name: build the pkcs11test binary
        working-directory: pkcs11test
        run: |
          make
          echo "PKCS11TEST_PATH=`pwd`" >> $GITHUB_ENV

      - name: reset the hsm
        working-directory: yubihsm-shell/build/src
        run: |
          ./yubihsm-shell --connector "$DEFAULT_CONNECTOR_URL" -p password -a reset
          sleep 3

      - name: run tests with ctest
        working-directory: yubihsm-shell/build
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
        run: |
          if [ $DOCKER_IMAGE = "debian:11" ]; then
            # we skip the engine tests (for now) since it ships with a broken curl version
            ctest --output-on-failure -E engine
          elif [ $DOCKER_IMAGE = "centos:7" ]; then
            # we skip the ecdh_derive tests (for now) since there is an issue with generating secp224r1 keys
            ctest --output-on-failure -E ecdh_derive
          else
            ctest --output-on-failure
          fi

      - name: run yubihsm-shell tests
        working-directory: yubihsm-shell/resources/tests/bash
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
        run: ./cmdline_test.sh $GITHUB_WORKSPACE/yubihsm-shell/build/src/yubihsm-shell $DEFAULT_CONNECTOR_URL

      - name: clone the YubicoLabs/python-pkcs11tester repository
        uses: actions/checkout@v2
        with:
          repository: YubicoLabs/python-pkcs11tester
          path: python-pkcs11tester

      - name: run python-pkcs11tester
        run: |
          export YUBIHSM_PKCS11_MODULE=`pwd`/yubihsm-shell/build/pkcs11/yubihsm_pkcs11.so
          cd python-pkcs11tester
          echo "connector=$DEFAULT_CONNECTOR_URL" > yubihsm_pkcs11.conf
          python3 -m pip install 'pykcs11' 'cryptography>=1.4.0'
          python3 setup.py test

      - name: cleanup
        if: ${{ always() }}
        run: |
          if [ -n "$DEFAULT_CONNECTOR_URL" ]; then
            curl -s http://localhost:12345/dispatcher/release?connector=$DEFAULT_CONNECTOR_URL
          fi
